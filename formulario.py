# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'formulario.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#importamos el conector de mysql que sera utilizado para consultar en la base de datos del INEGI
#los estados y municipios
import mysql.connector
#importamos PyQt5 y sus clases
from PyQt5 import QtCore, QtGui, QtWidgets
#importamos os para usar su metodo path para validar si existen archivos
import os
#importamos pandas para estructuras datos
import pandas as pd
#estas funciones son para conectarse a la base de datos, crear cursor y desconectarse, ya que
#es muy tedioso y repititivo el codigo si no las implementamos.
def conectar():
    try:
        my_db = mysql.connector.connect(host="localhost",
                                        user="root",
                                        password="susana15_A",
                                        database="uanl4")
    except:
        print("Ha ocurrido un error al intentar la conexion con la base de datos.")
    else:
        print("Conexcion exitosa.")
        return my_db
def _cursor(my_db):
    try:
        mycursor = my_db.cursor()
    except:
        print("Error al definir el cursor.")
    else:
        print("Cursor creado exitosamente.")
        return mycursor
def desconectar(my_db):
    try:
        my_db.close()
    except:
        print("Ha ocurrido un error")
    else:
        print("Desconectado.")

#Se define la clase Ui_Formulario donde se definen todos los Widgets, atributos y métodos que tendra
#la pantalla Formulario
class Ui_Formulario(object):

    #metodo para preparar la interfaz
    def setupUi(self, Formulario):
        #De la línea 53 a la 531 el QTDesigner te las generá automaticamente, basicamente en estas lineas se instancian
        #los componentes y se les edita sus propiedades a estas instancias.(Revisar linea 210 y 470)
        Formulario.setObjectName("Formulario")
        Formulario.resize(920, 859)
        self.centralwidget = QtWidgets.QWidget(Formulario)
        self.centralwidget.setObjectName("centralwidget")
        self.formLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget.setGeometry(QtCore.QRect(50, 90, 831, 381))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")
        #nombre
        self.label = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label)
        self.ipt_name = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.ipt_name.setMaximumSize(QtCore.QSize(300, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ipt_name.setFont(font)
        self.ipt_name.setObjectName("ipt_name")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.ipt_name)
        #apellido materno
        self.label_2 = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_2)
        self.ipt_ap_paterno = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.ipt_ap_paterno.setMaximumSize(QtCore.QSize(300, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ipt_ap_paterno.setFont(font)
        #self.ipt_ap_paterno.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.ipt_ap_paterno.setObjectName("ipt_ap_paterno")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.ipt_ap_paterno)
        #apellido materno
        self.label_3 = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.label_3)
        self.ipt_ap_materno = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.ipt_ap_materno.setMaximumSize(QtCore.QSize(300, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ipt_ap_materno.setFont(font)
        self.ipt_ap_materno.setObjectName("ipt_ap_materno")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.ipt_ap_materno)
        #matricula
        self.label_4 = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.label_4)
        self.ipt_matricula = QtWidgets.QSpinBox(self.formLayoutWidget)
        self.ipt_matricula.setMaximumSize(QtCore.QSize(200, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ipt_matricula.setFont(font)
        self.ipt_matricula.setMaximum(99999999)
        self.ipt_matricula.setObjectName("ipt_matricula")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.ipt_matricula)
        #edad
        self.label_5 = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.label_5)
        self.ipt_edad = QtWidgets.QSpinBox(self.formLayoutWidget)
        self.ipt_edad.setMaximumSize(QtCore.QSize(200, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.ipt_edad.setFont(font)
        self.ipt_edad.setObjectName("ipt_edad")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.ipt_edad)
        #domiciclio
        self.label_6 = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.label_6)
        self.txt_box_domicilio = QtWidgets.QTextEdit(self.formLayoutWidget)
        self.txt_box_domicilio.setEnabled(True)
        self.txt_box_domicilio.setMaximumSize(QtCore.QSize(500, 50))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.txt_box_domicilio.setFont(font)
        self.txt_box_domicilio.setObjectName("txt_box_domicilio")
        self.txt_box_domicilio.setText("Calle y Número")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.txt_box_domicilio)
        #estado
        self.label_7 = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.formLayout.setWidget(6, QtWidgets.QFormLayout.LabelRole, self.label_7)
        self.c_box_estado = QtWidgets.QComboBox(self.formLayoutWidget)
        self.c_box_estado.setMaximumSize(QtCore.QSize(500, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.c_box_estado.setFont(font)
        self.c_box_estado.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.c_box_estado.setObjectName("c_box_estado")
        #se añadieron 33 items vacios para despues actualizar su valor a los estados
        for i in range(33):
            self.c_box_estado.addItem("")
        #se conecto un evento para que al elegir un estado se llene el combobox de municipios definimdo mas debajo
        self.c_box_estado.activated.connect(self.municipios)
        self.formLayout.setWidget(6, QtWidgets.QFormLayout.FieldRole, self.c_box_estado)
        #municipio
        self.label_8 = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.formLayout.setWidget(7, QtWidgets.QFormLayout.LabelRole, self.label_8)
        self.c_box_municipio = QtWidgets.QComboBox(self.formLayoutWidget)
        self.c_box_municipio.setMaximumSize(QtCore.QSize(500, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        self.c_box_municipio.setFont(font)
        self.c_box_municipio.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.c_box_municipio.setObjectName("c_box_municipio")
        self.formLayout.setWidget(7, QtWidgets.QFormLayout.FieldRole, self.c_box_municipio)
        #radio buttons
        #porcentaje beca
        self.rb_group = QtWidgets.QButtonGroup()
        self.label_9 = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.formLayout.setWidget(8, QtWidgets.QFormLayout.LabelRole, self.label_9)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.r_b_0 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.r_b_0.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.r_b_0.setFont(font)
        self.r_b_0.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.r_b_0.setObjectName("r_b_0")
        self.horizontalLayout.addWidget(self.r_b_0)
        self.r_b_50 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.r_b_50.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.r_b_50.setFont(font)
        self.r_b_50.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.r_b_50.setObjectName("r_b_50")
        self.horizontalLayout.addWidget(self.r_b_50)
        self.r_b_80 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.r_b_80.setMaximumSize(QtCore.QSize(50, 16777215))
        self.r_b_80.setSizeIncrement(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.r_b_80.setFont(font)
        self.r_b_80.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.r_b_80.setObjectName("r_b_80")
        self.horizontalLayout.addWidget(self.r_b_80)
        self.r_b_100 = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.r_b_100.setMaximumSize(QtCore.QSize(50, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.r_b_100.setFont(font)
        self.r_b_100.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.r_b_100.setObjectName("r_b_100")
        self.horizontalLayout.addWidget(self.r_b_100)
        self.formLayout.setLayout(8, QtWidgets.QFormLayout.FieldRole, self.horizontalLayout)
        self.rb_group.addButton(self.r_b_0, 0)
        self.rb_group.addButton(self.r_b_50, 1)
        self.rb_group.addButton(self.r_b_80, 2)
        self.rb_group.addButton(self.r_b_100, 3)
        #check box
        #asignaturas preferidas
        self.label_10 = QtWidgets.QLabel(self.formLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setLineWidth(2)
        self.label_10.setObjectName("label_10")
        self.formLayout.setWidget(9, QtWidgets.QFormLayout.LabelRole, self.label_10)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.cb_programacion = QtWidgets.QCheckBox(self.formLayoutWidget)
        self.cb_programacion.setMaximumSize(QtCore.QSize(100, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.cb_programacion.setFont(font)
        self.cb_programacion.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.cb_programacion.setObjectName("cb_programacion")
        self.horizontalLayout_2.addWidget(self.cb_programacion)
        self.cb_contabilidad = QtWidgets.QCheckBox(self.formLayoutWidget)
        self.cb_contabilidad.setMaximumSize(QtCore.QSize(100, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.cb_contabilidad.setFont(font)
        self.cb_contabilidad.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.cb_contabilidad.setObjectName("cb_contabilidad")
        self.horizontalLayout_2.addWidget(self.cb_contabilidad)
        self.cb_bases_de_datos = QtWidgets.QCheckBox(self.formLayoutWidget)
        self.cb_bases_de_datos.setMaximumSize(QtCore.QSize(110, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.cb_bases_de_datos.setFont(font)
        self.cb_bases_de_datos.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.cb_bases_de_datos.setObjectName("cb_bases_de_datos")
        self.horizontalLayout_2.addWidget(self.cb_bases_de_datos)
        self.cb_estadistica = QtWidgets.QCheckBox(self.formLayoutWidget)
        self.cb_estadistica.setMaximumSize(QtCore.QSize(100, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.cb_estadistica.setFont(font)
        self.cb_estadistica.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.cb_estadistica.setObjectName("cb_estadistica")
        self.horizontalLayout_2.addWidget(self.cb_estadistica)
        self.cb_investigacion_de_operaciones = QtWidgets.QCheckBox(self.formLayoutWidget)
        self.cb_investigacion_de_operaciones.setMaximumSize(QtCore.QSize(200, 16777215))
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.cb_investigacion_de_operaciones.setFont(font)
        self.cb_investigacion_de_operaciones.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.cb_investigacion_de_operaciones.setObjectName("cb_investigacion_de_operaciones")
        self.horizontalLayout_2.addWidget(self.cb_investigacion_de_operaciones)
        self.formLayout.setLayout(9, QtWidgets.QFormLayout.FieldRole, self.horizontalLayout_2)
        #botones
        #grid
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(260, 480, 431, 51))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        #boton grabar
        self.btn_grabar = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btn_grabar.setFont(font)
        self.btn_grabar.setObjectName("btn_grabar")
        self.horizontalLayout_3.addWidget(self.btn_grabar)
        #boton limpiar
        self.btn_limpiar = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btn_limpiar.setFont(font)
        self.btn_limpiar.setObjectName("btn_limpiar")
        self.horizontalLayout_3.addWidget(self.btn_limpiar)
        #boton escribir
        self.btn_escribir = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.btn_escribir.setFont(font)
        self.btn_escribir.setObjectName("btn_escribir")
        self.horizontalLayout_3.addWidget(self.btn_escribir)
        #grid

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(50, 550, 831, 221))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        #titulo tabla
        self.titulo_tabla = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(105)
        self.titulo_tabla.setFont(font)
        self.titulo_tabla.setAlignment(QtCore.Qt.AlignCenter)
        self.titulo_tabla.setObjectName("titulo_tabla")
        self.verticalLayout.addWidget(self.titulo_tabla)
        #tabla
        self.tabla_registros = QtWidgets.QTableWidget(self.verticalLayoutWidget)
        self.tabla_registros.setObjectName("tabla_registros")
        self.tabla_registros.setColumnCount(10)
        item = QtWidgets.QTableWidgetItem()
        self.tabla_registros.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabla_registros.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabla_registros.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabla_registros.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabla_registros.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabla_registros.setHorizontalHeaderItem(5, item)
        self.tabla_registros.setColumnWidth(5, 250)
        item = QtWidgets.QTableWidgetItem()
        self.tabla_registros.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabla_registros.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabla_registros.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.tabla_registros.setHorizontalHeaderItem(9, item)
        self.tabla_registros.setColumnWidth(9, 250)
        self.verticalLayout.addWidget(self.tabla_registros)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(150, 20, 668, 51))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_11 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Segoe MDL2 Assets")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(102)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.verticalLayout_2.addWidget(self.label_11)
        Formulario.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(Formulario)
        self.statusbar.setObjectName("statusbar")
        Formulario.setStatusBar(self.statusbar)
        self.retranslateUi(Formulario)
        QtCore.QMetaObject.connectSlotsByName(Formulario)

    #El siguiente método tambien te lo generá el QTDesigner, pero aquí si se le modifico un poco a partir de la linea 481
    #hasta la 495, para llenar el combobox de los estados.
    def retranslateUi(self, Formulario):
        _translate = QtCore.QCoreApplication.translate
        Formulario.setWindowTitle(_translate("Formulario", "Formulario Registro Alumno"))
        self.label.setText(_translate("Formulario", "Nombre"))
        self.label_2.setText(_translate("Formulario", "Apellido Paterno"))
        self.label_3.setText(_translate("Formulario", "Apellido Materno"))
        self.label_4.setText(_translate("Formulario", "Matricula"))
        self.label_5.setText(_translate("Formulario", "Edad"))
        self.label_6.setText(_translate("Formulario", "Domicilio"))
        self.label_7.setText(_translate("Formulario", "Estado"))
        #se conecta a la base de datos
        base=conectar()
        #definimos cursor
        mycursor = _cursor(base)
        #intentamos una consulta
        #definimos un bloque de excepciones
        try:
            mycursor.execute("Select nombre from estados;")
            #guardamos los resultados de la consulta en una variable llamada estados
            estados = mycursor.fetchall()
        except:
            print("Error en la consulta")
        else:
            print("Consulta realizada con exito.")
            #recorremos el espacio en memoria estados
            for i in range(len(estados)+1):
                #esta linea es para si el iterador es igual a 0 haga ninguna accion ya que ahi no pondremos texto
                #alguno
                if i == 0:
                    pass

                else:
                    #si no es igual a 0, se llenara el combobox con el estado, para esto accedemos al subitem 0 del
                    # item con el indice
                    #equivalente al valor del iterador - 1 y actualizamos el texto de la columna equivalente al valor
                    #del iterador.
                    self.c_box_estado.setItemText(i,estados[i-1][0])
        #nos desconectamos de la base de datos
        desconectar(base)
        self.label_8.setText(_translate("Formulario", "Municipio"))
        self.label_9.setText(_translate("Formulario", "Porcentaje Beca"))
        self.r_b_0.setText(_translate("Formulario", "0"))
        self.r_b_50.setText(_translate("Formulario", "50"))
        self.r_b_80.setText(_translate("Formulario", "80"))
        self.r_b_100.setText(_translate("Formulario", "100"))
        self.label_10.setText(_translate("Formulario", "Asignatura(s) Preferida(s)"))
        self.cb_programacion.setText(_translate("Formulario", "Programación"))
        self.cb_contabilidad.setText(_translate("Formulario", "Contabilidad"))
        self.cb_bases_de_datos.setText(_translate("Formulario", "Bases de Datos"))
        self.cb_estadistica.setText(_translate("Formulario", "Estadistica"))
        self.cb_investigacion_de_operaciones.setText(_translate("Formulario", "Investigacion de Operaciones"))
        self.btn_grabar.setText(_translate("Formulario", "Grabar"))
        self.btn_limpiar.setText(_translate("Formulario", "Limpiar"))
        self.btn_escribir.setText(_translate("Formulario", "Escribir"))
        self.titulo_tabla.setText(_translate("Formulario", "Alumnos Registrados"))
        item = self.tabla_registros.horizontalHeaderItem(0)
        item.setText(_translate("Formulario", "Matricula"))
        item = self.tabla_registros.horizontalHeaderItem(1)
        item.setText(_translate("Formulario", "Apellido Paterno"))
        item = self.tabla_registros.horizontalHeaderItem(2)
        item.setText(_translate("Formulario", "Apellido Materno"))
        item = self.tabla_registros.horizontalHeaderItem(3)
        item.setText(_translate("Formulario", "Nombre"))
        item = self.tabla_registros.horizontalHeaderItem(4)
        item.setText(_translate("Formulario", "Edad"))
        item = self.tabla_registros.horizontalHeaderItem(5)
        item.setText(_translate("Formulario", "Domicilio"))
        item = self.tabla_registros.horizontalHeaderItem(6)
        item.setText(_translate("Formulario", "Estado"))
        item = self.tabla_registros.horizontalHeaderItem(7)
        item.setText(_translate("Formulario", "Municipio"))
        item = self.tabla_registros.horizontalHeaderItem(8)
        item.setText(_translate("Formulario", "Porcentaje Beca"))
        item = self.tabla_registros.horizontalHeaderItem(9)
        item.setText(_translate("Formulario", "Asigntaturas preferidas"))
        self.label_11.setText(_translate("Formulario", "INGRESE LOS DATOS QUE SE PIDEN A CONTINUACION DEL ALUMNO"))
    #definimos un método para llenar el combo box municipios
    def municipios(self):
        #definimos una lista llamada municipios
        _municipios = list()
        #limpiamos el combo box municipios para evitar que los items se acumulen
        self.c_box_municipio.clear()
        #conectamos a la base de datos
        base = conectar()
        #definimos un cursor
        mycursor=_cursor(base)
        #obtenemos el valor seleccionado
        estado = self.c_box_estado.currentText()

        #definimos un bloque de excepciones
        try:
            #realizamos la consulta donde se busca el nombre de los municipios en base al nombre del estado
            mycursor.execute(f"Select municipios.nombre as 'Municipio' from municipios where municipios.estado_id = (Select id from estados where nombre = '{estado}' );")
            #guardamos los resultados de la consulta en la lista _municipios
            _municipios = mycursor.fetchall()

        except mysql.connector.Error as err:
            print(err)
        else:
            print("Consulta realizada con exito")
        #recorremos la lista municipios para añadir el item vacio y despues vaciar el municipio correspondiente.
        for i in range(len(_municipios)):
            self.c_box_municipio.addItem("")
        for i in range(len(_municipios)):
            self.c_box_municipio.setItemText(i,_municipios[i][0])
        #nos desconectamos de la base de datos.
        desconectar(base)


    # metodo que arroja un mensaje, recibe como parametro el titulo del mensaje y su texto
    def showMessage(self, titulo, texto):
        # instanciamos un QMessageBox
        msg = QtWidgets.QMessageBox()
        # le damos titulo
        msg.setWindowTitle(titulo)
        # le damos texto
        msg.setText(texto)
        # lo ejecutamos
        msg.exec_()

    def confirmacion(self, titulo, texto):
        # instanciamos un QMessageBox
        msg = QtWidgets.QMessageBox()
        # le damos titulo
        msg.setWindowTitle(titulo)
        # le damos texto
        msg.setText(texto)
        # le añadimos dos botones de Yes y Cancel
        msg.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.Cancel)
        # lo ejecutamos
        msg.exec_()
        # retornamos el valor que elige el usuario ya que sera usado posteriormente
        return msg

    # metodo para grabar los resultados en la tabla
    def grabar(self):
        #obtenemos el valor de cada componente que no sea RadioButton o CheckBox
        self.matricula = self.ipt_matricula.text()
        self.name = self.ipt_name.text()
        self.ap_paterno = self.ipt_ap_paterno.text()
        self.ap_materno = self.ipt_ap_materno.text()
        self.edad = self.ipt_edad.text()
        self.domicilio = self.txt_box_domicilio.toPlainText()
        self.municipio = self.c_box_municipio.currentText()
        self.estado = self.c_box_estado.currentText()
        #definimos una lista que servira para almacenar las materias preferidas
        self.materias = []


        #se recorren todos los checkboxes, si estan seleccionados, el valor en texto de estos se agrega a la lista
        if self.cb_programacion.isChecked():
            self.materias.append(self.cb_programacion.text())
        if self.cb_estadistica.isChecked():
            self.materias.append(self.cb_estadistica.text())
        if self.cb_bases_de_datos.isChecked():
            self.materias.append(self.cb_bases_de_datos.text())
        if self.cb_contabilidad.isChecked():
            self.materias.append(self.cb_contabilidad.text())
        if self.cb_investigacion_de_operaciones.isChecked():
            self.materias.append(self.cb_investigacion_de_operaciones.text())

        #definimos la variable porcentaje donde se almacenara este mismo.
        self.porcentaje=""
        #validamos en base a la longitud y valor,en orden de cascada, si la longitud es diferente a 0 avanzamos, o si el
        #valor no se encuentra ya registrado.
        #definimos la clase avanzar de tipo boolean para tener un control si procedemos a guardar o no, por ejemplo, si
        #el campo nombre no tiene una longitud mayor a 0, la variable avanzar settea su valor a False, la cual es usada
        #como condicion para grabar los datos y nos arroja un mensaje diciendonos que valor falta por llenarse.
        if len(self.name) != 0:

            if len(self.ap_paterno) != 0:

                if len(self.ap_materno) != 0:

                    if self.edad != "0":

                        if len(self.domicilio) != 0:

                            if self.domicilio != "Calle y Número":
                                if len(self.estado) != 0:
                                    for i in self.rb_group.buttons():
                                        if i.isChecked():
                                            self.porcentaje = i.text()
                                    if len(self.porcentaje) > 0:
                                        if self.matricula != "0":
                                            #si no hay registros aun, los obtenemos con ayuda del metodo rowCount del
                                            #QTableWidget, no se verifica la matricula, ya que es obvio que no hay dos iguales
                                            long =(self.tabla_registros.rowCount())
                                            if long > 0:
                                                #si hay registros, se recorren los registros, verificando la columna correspondiente
                                                #al campo matricula, en este caso el 0
                                                for i in range(self.tabla_registros.rowCount()):
                                                    if self.tabla_registros.item(i, 0).text() != self.matricula:
                                                        avanzar = True

                                                    else:
                                                        #mensaje que se arroja
                                                        self.showMessage("Error",
                                                                         "Ya hay un registro con esa matricula en el registro {0}, no puede haber 2".format(
                                                                             i + 1))
                                                        self.ipt_matricula.setFocus()
                                                        avanzar = False
                                                        break
                                            else:
                                                avanzar = True

                                        else:
                                            # mensaje que se arroja
                                            self.showMessage("Error",
                                                             "El valor introducido en el campo 'Matricula' debe ser diferente a '0'")
                                            self.ipt_matricula.setFocus()
                                            avanzar = False

                                    else:
                                        # mensaje que se arroja
                                        self.showMessage("Error",
                                                         "No se ha introducido un porcentaje")
                                        avanzar = False

                                else:
                                    # mensaje que se arroja
                                    self.showMessage("Error", "No se ha seleccionado una opcion del campo 'Estado'")
                                    self.c_box_estado.setFocus()
                                    avanzar = False
                            else:
                                # mensaje que se arroja
                                self.showMessage("Advertencia",
                                                 "El valor del campo 'Domicilio' debe ser diferente a 'Calle y Número', a menos que ese sea su domicilio...Si es asi, añada un 0")
                                self.txt_box_domicilio.setFocus()
                                avanzar = False
                        else:
                            # mensaje que se arroja
                            self.showMessage("Error", "No se ha introducido el campo 'Domicilio'")
                            self.txt_box_domicilio.setFocus()
                            avanzar = False
                    else:
                        # mensaje que se arroja
                        self.showMessage("Error",
                                         "El valor introducido en el campo 'Edad' debe ser diferente a '0'")
                        self.ipt_edad.setFocus()
                        avanzar = False
                else:
                    # mensaje que se arroja
                    self.showMessage("Error", "No se ha introducido el campo 'Apellido Materno'")
                    self.ipt_ap_materno.setFocus()
                    avanzar = False
            else:
                # mensaje que se arroja
                self.showMessage("Error", "No se ha introducido el campo 'Apellido Paterno'")
                self.ipt_ap_paterno.setFocus()
                avanzar = False
        else:
            # mensaje que se arroja
            self.showMessage("Error", "No se ha introducido el campo 'Nombre'")
            self.ipt_name.setFocus()
            avanzar = False
        #si no se eligio ninuna materia, la variable materias para a ser de tipo str con el valor "Ninguna Materia Favorita"
        if len(self.materias) == 0:
            self.materias = "Ninguna materia favorita"



        #si todas las validaciones fueron exitosas, entonces
        #Entramos al ciclo avanzar


        if avanzar == True:
            print("Llegamos a aca")
            #variable de paso para almacenar el valor de materias
            materias=""
            if self.materias == "Ninguna materia favorita":
                materias = self.materias
            else:
                for i in self.materias:
                    materias = materias + i + "\n\t\t"
            #Se define una variable que contendra el texto para el MessageBox que servira de confirmacion
            texto = f"Nombre:\t\t{self.name}\nApellido Paterno:\t{self.ap_paterno}\nApellido Materno:\t{self.ap_materno}\nMatricula:\t\t{self.matricula}\n" \
                    f"Edad:\t\t{self.edad}\nEstado:\t\t{self.estado}\nMunicipio:\t\t{self.municipio}\nPorcentaje Beca:\t{self.porcentaje}\n" \
                    f"Materias Preferidas:\t{materias}"
            #llamamos al metodo confirmacion que sirve para arrojar un MessageBox y le pasamos dos parametros, titulo y texto del mensaje y almacenamos el valor que elija el usuario
            valor = self.confirmacion("Los datos son correctos?", texto)
            #si el usuario elige Yes procedemos a grabar en la tabla, si elige cancel, cancelamos todo.
            if valor.Yes:
                #variable para saber en que posicion se agregara el registro, usamos el metodo rowCount de la TablaWidget
                #osease que si la tabla tiene cero filas, en la linea 731, se posicionara la fila en la posicion 0, osease
                #la ultima
                rowPosition = self.tabla_registros.rowCount()
                #cambiamos el nombre de la variable por cuestiones de simplicidad
                self.tabla = self.tabla_registros
                #insertamos una fila nueva, usamos como valor criterio la variable rowPosition
                self.tabla.insertRow(rowPosition)
                #guardamos en una variable el numero de columnas y filas
                numcols = self.tabla.columnCount()
                numrows = self.tabla.rowCount()
                #definimos el numero de filas y columnas
                self.tabla.setRowCount(numrows)
                self.tabla.setColumnCount(numcols)
                #añadimos un item a su correspiendente encabezado hasta la columna 8
                self.tabla.setItem(numrows - 1, 0, QtWidgets.QTableWidgetItem(self.matricula))
                self.tabla.setItem(numrows - 1, 1, QtWidgets.QTableWidgetItem(self.ap_paterno))
                self.tabla.setItem(numrows - 1, 2, QtWidgets.QTableWidgetItem(self.ap_materno))
                self.tabla.setItem(numrows - 1, 3, QtWidgets.QTableWidgetItem(self.name))
                self.tabla.setItem(numrows - 1, 4, QtWidgets.QTableWidgetItem(self.edad))
                self.tabla.setItem(numrows - 1, 5, QtWidgets.QTableWidgetItem(self.domicilio))
                self.tabla.setItem(numrows - 1, 6, QtWidgets.QTableWidgetItem(self.estado))
                self.tabla.setItem(numrows - 1, 7, QtWidgets.QTableWidgetItem(self.municipio))
                self.tabla.setItem(numrows - 1, 8, QtWidgets.QTableWidgetItem(self.porcentaje))
                #si no se eligio ninguna materia entonces añadimos el texto de la variable materias a la columna 9
                if self.materias == "Ninguna materia favorita":

                    self.tabla.setItem(numrows - 1, 9, QtWidgets.QTableWidgetItem(self.materias))
                #pero si no
                else:

                    # definimos un combo box para grabar las materias
                    combo_box = QtWidgets.QComboBox()
                    #recorremos la lista y cada valor lo añadimos como item al combo box
                    for i in self.materias:
                        combo_box.addItem(i)
                    #añadimos el widget a la tabla
                    self.tabla.setCellWidget(numrows - 1, 9, combo_box)
                #lo siguiente es para que la tabla sea de solo lectura
                #recorremos cada fila
                for i in range(self.tabla.rowCount()):
                    #recorremos cada columna
                    for y in range(10):
                        #si el iterador y es diferente a 9(ya que si recorremos todas las columnas y en una hay un combobox, este no
                        #tiene el metodo setFlags, por lo tanto no se podra inhabilitar, ya viene inhabilitado a editar por defecto)
                        # osea, si el ciclo no va en la columna nueve,
                        #con ayuda del metodo setFlags, se define el tipo de la columna, en este caso Inhabilitada a edicion.
                        if y != 9:

                            flags = QtCore.Qt.ItemIsEnabled
                            self.tabla.item(numrows - 1, y).setFlags(flags)
                        else:
                            if self.materias=="Ninguna materia favorita":
                                self.tabla.item(numrows - 1, y).setFlags(flags)
                #arrojamos mensaje de exito
                self.showMessage("Done","El registro se ha grabado en la tabla con exito.")
                #limpiamos los campos con ayuda del metodo clean.
                self.clean()
        #liberamos algo de memoria
        del self.name
        del self.ap_paterno
        del self.ap_materno
        del self.edad
        del self.matricula
        del self.domicilio
        del self.porcentaje
        del self.materias
        del materias
        del long
        del self.tabla
        del combo_box
        del rowPosition
        del numcols
        del numrows



    #este metodo sirve para limpiar los campos del formulario.
    def clean(self):
        self.ipt_name.setText("")
        self.ipt_ap_paterno.setText("")
        self.ipt_ap_materno.setText("")
        self.ipt_matricula.setValue(0)
        self.ipt_edad.setValue(0)
        self.txt_box_domicilio.setText("Calle y Número")
        self.c_box_estado.setCurrentIndex(0)
        self.c_box_municipio.clear()
        self.r_b_0.setChecked(True)
        self.cb_investigacion_de_operaciones.setChecked(False)
        self.cb_bases_de_datos.setChecked(False)
        self.cb_estadistica.setChecked(False)
        self.cb_contabilidad.setChecked(False)
        self.cb_programacion.setChecked(False)
        self.ipt_name.setFocus()


    #metodo para llenar la tabla en dado caso que haya un previo registro.
    def fillTable(self):
        #si existe el archivo registro_alumnos.csv entonces
        if os.path.exists('registro_alumnos.csv'):
            #definimos una variable para importar el dataframe de este archivo
            df = pd.read_csv('registro_alumnos.csv')
            #recorremos el df en base a su longitud
            for i in range(len(df)):
                # variable para saber en que posicion se agregara el registro, usamos el metodo rowCount de la TablaWidget
                # osease que si la tabla tiene cero filas, en la linea 731, se posicionara la fila en la posicion 0, osease
                # la ultima
                rowPosition = self.tabla_registros.rowCount()
                # cambiamos el nombre de la variable por cuestiones de simplicidad
                self.tabla = self.tabla_registros
                # insertamos una fila nueva, usamos como valor criterio la variable rowPosition
                self.tabla.insertRow(rowPosition)
                # guardamos en una variable el numero de columnas y filas
                numcols = self.tabla.columnCount()
                numrows = self.tabla.rowCount()
                # definimos el numero de filas y columnas
                self.tabla.setRowCount(numrows)
                self.tabla.setColumnCount(numcols)
                #recorremos cada valor de la fila acorde al iterador i y rellenamos la tabla
                for y in range(10):
                    #si el iterador y va en el 9, entonces se agregan otros criterios
                    if y == 9:
                        #si el valor de la columna i,y es igual a "ninguna materia favorita" entonces se agrega un item
                        if df.iloc[i][y] == "Ninguna materia favorita":
                            self.tabla.setItem(numrows - 1, y, QtWidgets.QTableWidgetItem(str(df.iloc[i][y])))
                            flags = QtCore.Qt.ItemIsEnabled
                            self.tabla.item(numrows - 1, y).setFlags(flags)
                        else:
                            #si no lo es, entonces se define un combo box
                            combo_box = QtWidgets.QComboBox()

                            #se define una variable con un espacio
                            palabra = " "
                            for z in df.iloc[i][y]:
                                #recorremos cada letra del valor almacenado en i,y (ya que este se almacena en el csv como cadena de texto)
                                #agregamos criterios para solo almacenar letras
                                if z not in (",", "'", "[", "]"):
                                    #almacenamos las letras en la variable palabra
                                    palabra = palabra + z
                                    #si las letras almacenadas en palabra sin
                                    # espacios a la izquierda se encuentra en la tupla pasada como condicion en
                                    #el siguiente if, entonces se agrega la palabra al combobox sin espacios a la izquierda
                                    if palabra.lstrip() in (
                                    "Programación", "Bases de Datos", "Contabilidad", "Estadistica",
                                    "Investigacion de Operaciones"):
                                        combo_box.addItem(palabra.lstrip())
                                        #y se setea la variable palabra a nada
                                        palabra = ""
                            self.tabla.setCellWidget(i, y, combo_box)

                    else:
                        #si no va en la columna 9 entonces simplemente agrega el item y lo define como inhabilitado para
                        #editar
                        self.tabla.setItem(numrows - 1, y, QtWidgets.QTableWidgetItem(str(df.iloc[i][y])))
                        flags = QtCore.Qt.ItemIsEnabled
                        self.tabla.item(numrows -1,y).setFlags(flags)
            #liberamos el espacio en memoria del dataframe
            del df




    #metodo para escribir la tabla en un archivo csv
    def escribir(self):
        #definimos un variable que almacenara el valor de un MessageBox que sera arrojado por el metodo confirmacion
        #para saber si el usuario quiere esribir la tabla
        print("Jijiii")
        save = self.confirmacion("Escribir registro","¿Desea escribir el registro?")
        #si desea escribirlos entonces
        if save.Yes:
            print("Entramos")
            #definimos un diccionario con las llaves de nombre igual a los encabezados de las columnas
            dictionary = {'Matricula': [],
                          'Apellido Paterno': [],
                          'Apellido Materno': [],
                          'Nombre': [],
                          'Edad': [],
                          'Domicilio': [],
                          'Municipio': [],
                          'Estado': [],
                          'Porcentaje Beca': [],
                          'Materias Preferidas': []
                          }
            #lo convertimos a DataFrame
            df = pd.DataFrame(dictionary)
            #vemos cuantos registros tiene la tabla
            rango = self.tabla_registros.rowCount()
            #dependiendo de los registros, se entrara a un ciclo for
            # si los registros son mas de 0 entonces
            print("Pasamos rango")
            if rango > 0:
                #definimos un ciclo con un range en base a la variable rango
                for i in range(rango):
                    print("Recorriendo rango")
                    #definimos dos listas, una que servira como almacenamiento de los valores y otra que sera
                    # convertida a tupla para su posterior adicion a la otra lista

                    valores = []#sera convertida a tupla
                    valor = []
                    #Definimos un ciclo para recorrer las columnas
                    for y in range(10):
                        #si va en el valor 9, entonces significa que entro en la columna referente a las materias
                        if y == 9:

                            try:
                                # intentamos guardar las materias en una variable si es que estan en un widget dentro de una
                                # celda
                                cb = self.tabla_registros.cellWidget(i, y)
                                #recorremos cada valor del combobox y añadimos su texto en la variable allitems
                                allitems = [cb.itemText(z) for z in range(cb.count())]
                                #añadimos la variable allitems a valores
                                valores.append(allitems)
                            except:
                                #si no lo esta y solo es un item añadimos el valor de la siguiente forma, muy sencillo
                                valores.append(self.tabla_registros.item(i, y).text())
                        else:
                            #si no en el valor 9, entonces podemos añadir el texto del item
                            valores.append(self.tabla_registros.item(i, y).text())
                    #convertimos la lista a tupla
                    valores = tuple(valores)
                    #añadimos la lista a la tupla, esto es porque en pandas una de las maneras para
                    # crear un dataframe es en la que necesita una lista de tuplas para
                    #crear un dataframe
                    valor.append(valores)
                    #creamos un nuevo df para despues añadirlo al anterior y se adhieran las filas en un solo
                    new_df = pd.DataFrame(valor,
                                          columns=["Matricula", "Apellido Paterno", "Apellido Materno", "Nombre",
                                                   "Edad",
                                                   "Domicilio", "Municipio", "Estado", "Porcentaje Beca",
                                                   "Materias Preferidas"])


                    #se adhiere al principal
                    df = df.append(new_df, ignore_index=True)

                #convertimos a csv el dataframe
                try:
                    #intentamos
                    df.to_csv(r'registro_alumnos.csv',index=False,header=True)
                except:
                    #arrojamos mensaje de error
                    self.showMessage("Error.", "Se ha intentado guardar el archivo, pero no fue posible, muy seguramente lo tiene abierto, verifique.")
                else:
                    # arrojamos mensaje de exito con ayuda de el metodo showMessage
                    self.showMessage("Done.", "Se han guardado los datos correctamente.")
                    # Liberamos memoria
                    del df,new_df,valor,valores,rango

            else:
                #si no hay registros en la tabla, entonces no hay nada que guardar,
                #arrojamos un MessageBox diciendo lo anterior.
                self.showMessage("Done.", "Nada en la tabla que guardar.")




